#Options
GenerateScanner = true
GenerateParser = true
Language = Java
ScannerName = Lexico
ParserName = Sintatico
SemanticName = Semantico
ScannerCaseSensitive = true
ScannerTable = Compact
Input = Stream
Parser = LL
#RegularDefinitions
min: [a-z]
dig: [0-9]
D1: \"[^\"\n]*\"
D2: '[^'\n\\]*'
c_comentario_bloco: \[\n[^\[\]]*\n\]
c_comentario_linha: # [^\n]*
#Tokens
// Classes
id: {min}+_?(({min}|{dig})+_?)*({min}|{dig})|{min}
c_int: {dig}+
c_float: {dig}+\.{dig}+
c_str: {D1}|{D2}

// Palavras reservadas
int     = id: "int" 
float   = id: "float" 
str     = id: "str" 

and       = id: "and"
or        = id: "or"
not       = id: "not"
if        = id: "if"
elif      = id: "elif"
else      = id: "else"
for       = id: "for"
in        = id: "in"
range     = id: "range"
while     = id: "while"
end       = id: "end"
false     = id: "false"
true      = id: "true"
input     = id: "input"
print     = id: "print"

// Símbolos especiais
"("
")"
"=="
"!="
"<"
"<="
">"
">="
"+"
"-"
"*"
"/"
"//"
"%"
","
":"
"="
"+="
"-="

// Comentários
:!({c_comentario_bloco}|{c_comentario_linha})

// Caracteres de formação
:[\s\t\n]


#NonTerminals
<lista_de_comandos>
<tipo>
<simples>
<operacao>
<atribuicao>
<entrada_de_dados>
<saida_de_dados>
<lista_de_expressoes>
<selecao>
<selecao_simples>
<selecao_senao>
<selecao_composta>
<selecao_alternativa>
<repeticao>
<repeticao_while>
<repeticao_for_range>
<repeticao_for_each>
<expressao>
<expressao_>
<elemento>
<relacional>
<operador_relacional>
<aritmetica>
<aritmetica_>
<termo>
<termo_>
<fator>
<lista_de_comandos_A>
<operacao_A>
<entrada_de_dados_A>
<lista_de_expressoes_A>
<selecao_A>
<selecao_composta_A>
<selecao_alternativa_A>
<repeticao_A>
<relacional_A>
<operacao_B>



#Grammar
<lista_de_comandos>::= <operacao> <lista_de_comandos_A> | <saida_de_dados> <lista_de_comandos_A> | <selecao> <lista_de_comandos_A> | <repeticao> <lista_de_comandos_A>;
<lista_de_comandos_A>::= î | <lista_de_comandos>;
<tipo> ::= <simples> ;
<simples> ::= int | float | str;
<operacao> ::= id <operacao_B>;
<operacao_B> ::= "=" <operacao_A> | "+=" <expressao> | "-=" <expressao> ;
<operacao_A> ::= <atribuicao> | <entrada_de_dados>;
<atribuicao> ::= <expressao>;
<entrada_de_dados> ::= input "(" <entrada_de_dados_A> ")" | <tipo> "(" input "(" <entrada_de_dados_A> ")" ")";
<entrada_de_dados_A> ::= c_str | î ; 
<saida_de_dados> ::= print "(" <lista_de_expressoes> ")";
<lista_de_expressoes> ::= <expressao> <lista_de_expressoes_A>;
<lista_de_expressoes_A> ::= î | "," <lista_de_expressoes>;
<selecao> ::= if <expressao> ":" <lista_de_comandos> <selecao_A>;
<selecao_A> ::= <selecao_simples> | <selecao_senao> | <selecao_composta>;
<selecao_simples> ::= end;
<selecao_senao> ::= else ":" <lista_de_comandos> end;
<selecao_composta> ::= <selecao_alternativa> <selecao_composta_A> ;
<selecao_composta_A> ::= end |  <selecao_senao>;
<selecao_alternativa> ::= elif <expressao> ":" <lista_de_comandos> <selecao_alternativa_A>;
<selecao_alternativa_A> ::= î | <selecao_alternativa>;
<repeticao> ::= <repeticao_while> | for id in <repeticao_A>;
<repeticao_A> ::= <repeticao_for_range> | <repeticao_for_each>;
<repeticao_while> ::= while <expressao> ":" <lista_de_comandos> end;
<repeticao_for_range> ::= range "(" <expressao> ")" ":" <lista_de_comandos> end;
<repeticao_for_each> ::= id ":" <lista_de_comandos> end;
<expressao> ::= <elemento> <expressao_>;
<expressao_> ::= and <elemento> <expressao_> | or <elemento> <expressao_> | î;
<elemento> ::= <relacional> | true | false | not <elemento>;
<relacional> ::= <aritmetica> <relacional_A>;
<relacional_A> ::= <operador_relacional> <aritmetica> | î;
<operador_relacional> ::= "==" | "!=" | "<" | "<=" | ">" | ">=";
<aritmetica> ::= <termo> <aritmetica_>;
<aritmetica_> ::= "+" <termo>  <aritmetica_> | "-" <termo> <aritmetica_> | î;
<termo> ::= <fator> <termo_>;
<termo_> ::= "*" <fator> <termo_> | "/" <fator> <termo_> | "//" <fator> <termo_> |  "%" <fator> <termo_> | î;
<fator>	::= id | c_int | c_float | c_str | "(" <expressao> ")" | "+" <fator> | "-" <fator>;


